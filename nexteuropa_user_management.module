<?php
/**
 * @file
 * Code for the NextEuropa Manage Roles feature.
 */

include_once 'nexteuropa_user_management.features.inc';
include_once 'nexteuropa_user_management.actions.inc';
include_once 'includes/nexteuropa_user_management.permissions.inc';

/**
 * Implements hook_permission().
 */
function nexteuropa_user_management_permission() {
  return array(
    'access nexteuropa user management views' => array(
      'title' => t('Allow to access nexteuropa user management views'),
      'restrict access' => TRUE,
    ),
    'nexteuropa manage users non restricted operations' => array(
      'title' => t('Allow to manage users with non restricted operations'),
      'restrict access' => TRUE,
    ),
    'nexteuropa manage users purge cache' => array(
      'title' => t('Allow to purge different type of caches'),
    ),
    'administer nexteuropa user management' => array(
      'title' => t('Allow to administer user management module'),
      'description' => t('Allows to access user management modules administration pages, like the notification settings page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nexteuropa_user_management_menu() {
  $items = array();

  $items['admin/config/people/nexteuropa-user-management-settings'] = array(
    'title' => 'Nexteuropa User Management settings',
    'description' => 'Notification settings, used to notify user management users from a new blocked user registration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_nexteuropa_user_management_settings_form'),
    'access arguments' => array('administer nexteuropa user management'),
    'file' => 'nexteuropa_user_management.settings.admin.inc',
  );
  $items['admin/config/development/cache'] = array(
    'title' => 'Cache purges',
    'description' => 'Purge different type of caches.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_nexteuropa_user_management_cache_form'),
    'access arguments' => array('nexteuropa manage users purge cache'),
    'file' => 'nexteuropa_user_management.cache.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function nexteuropa_user_management_entity_info_alter(&$entity_info) {
  $entity_info['user']['access callback'] = 'nexteuropa_user_management_metadata_user_access';
}

/**
 * Access callback for the user entity.
 */
function nexteuropa_user_management_metadata_user_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  $account = isset($account) ? $account : $GLOBALS['user'];
  if ($op === 'update' && user_access('nexteuropa manage users non restricted operations', $account)) {
    return TRUE;
  }

  // Call the original core callback too.
  return entity_metadata_user_access($op, $entity, $account, $entity_type);
}

/**
 * Implements hook_module_implements_alter().
 *
 * To make sure nothing will override our access callback, we need to run last.
 * Because the entity module override the access callback, and using this
 * technique, using weight is totally useless.
 */
function nexteuropa_user_management_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_info_alter') {
    // Move our hook implementation to the bottom.
    $group = $implementations['nexteuropa_user_management'];
    unset($implementations['nexteuropa_user_management']);
    $implementations['nexteuropa_user_management'] = $group;
  }
}

/**
 * Restrict roles according to the settings.php.
 *
 * @param array $roles
 *   A roles list to restrict. The keys should be role ids (rid) the values
 *   should be the role name.
 */
function _nexteuropa_user_management_restrict_roles(&$roles) {
  $banned_roles = variable_get('nexteuropa_user_management_banned_roles', array());
  $banned_role_ids = variable_get('nexteuropa_user_management_banned_role_ids', array(
    variable_get('user_admin_role', 0),
    variable_get('nexteuropa_user_management_user_manager_rid'),
  ));

  // Make sure one of the two options are set, if not, then make it unusable
  // the form and provide a message.
  if (empty($banned_roles) && empty($banned_role_ids)) {
    $roles = array();
    drupal_set_message(t('First you need to setup the banned roles in the settings.php.'), 'error', FALSE);
    return;
  }

  // Check if at least the variable type is correct to prevent later on
  // notifications.
  if (!is_array($banned_roles) || !is_array($banned_role_ids)) {
    $roles = array();
    drupal_set_message(t('Incorrect parameter type. The set variable should be an array.'), 'error', FALSE);
    return;
  }

  // Setup replaceable tokens.
  $replacement = array(
    '<!!ADMIN_RID!!>' => variable_get('user_admin_role', 0),
    '<!!USER_MANAGER_RID!!>' => variable_get('nexteuropa_user_management_user_manager_rid'),
  );

  // Replace tokens to IDs.
  $banned_role_ids = array_map(function ($value) use ($replacement) {
    return isset($replacement[$value]) ? $replacement[$value] : $value;
  }, $banned_role_ids);

  // Unset banned role by ids.
  foreach ($banned_role_ids as $banned_role_id) {
    unset($roles[$banned_role_id]);
  }

  // Unset banned roles by names.
  $roles = array_filter($roles, function ($value) use ($banned_roles) {
    return !in_array($value, $banned_roles, FALSE);
  });
}

/**
 * Implements hook_views_default_views_alter().
 */
function nexteuropa_user_management_views_default_views_alter(&$views) {
  if (array_key_exists('nexteuropa_user_management', $views)) {
    $admin_rid = variable_get('user_admin_role', 0);
    $user_manager_rid = variable_get('nexteuropa_user_management_user_manager_rid');

    $view = $views['nexteuropa_user_management'];

    $handler = $view->display['default']->handler;
    // Add proper roles as filtration.
    $handler->display->display_options['arguments']['uid']['validate_options']['roles'] = array(
      (int) $admin_rid => $admin_rid,
      (int) $user_manager_rid => $user_manager_rid,
    );

    // Remove first and last name if realname module is not installed.
    if (!module_exists('realname')) {
      /* Display: Master */
      $handler->display->display_options['style_options']['columns'] = array_filter($handler->display->display_options['style_options']['columns'], function ($value) {
        return !in_array($value, array('field_firstname', 'field_lastname'));
      });

      unset($handler->display->display_options['style_options']['info']['field_firstname']);
      unset($handler->display->display_options['style_options']['info']['field_lastname']);

      /* Field: User: First name */
      unset($handler->display->display_options['fields']['field_firstname']);
      /* Field: User: Last name */
      unset($handler->display->display_options['fields']['field_lastname']);

      /* Filter criterion: User: First name (field_firstname) */
      unset($handler->display->display_options['filters']['field_firstname_value']);

      /* Filter criterion: User: Last name (field_lastname) */
      unset($handler->display->display_options['filters']['field_lastname_value']);
    }
  }
}

/**
 * Implements hook_token_info().
 */
function nexteuropa_user_management_token_info() {
  $data = array();

  $data['tokens']['site']['nexteuropa-user-management-page-url'] = array(
    'name' => t('User Management page'),
    'description' => t("The path to the Nexteuropa user management page."),
  );

  return $data;
}

/**
 * Implements hook_tokens().
 */
function nexteuropa_user_management_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
  }

  $replacements = array();

  if ($type === 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'nexteuropa-user-management-page-url':
          $view = views_get_view('nexteuropa_user_management');
          $view->set_display('neum');
          $replacements[$original] = url($view->get_path(), $url_options);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_user_insert().
 */
function nexteuropa_user_management_user_insert(&$edit, $account, $category) {
  // Send the notification when a new blocked user is created and the
  // notification e-mail address is set.
  $mail = variable_get('nexteuropa_user_management_um_notification_email', '');
  if ($mail !== '' && empty($account->status)) {
    drupal_mail('nexteuropa_user_management', 'neum_notification', $mail, language_default(), array('user' => $account));
  }
}

/**
 * Implements hook_mail().
 */
function nexteuropa_user_management_mail($key, &$message, $params) {
  switch ($key) {
    case 'neum_notification':
      $message['subject'] = token_replace(variable_get('nexteuropa_user_management_um_notification_subject'), array(
        'user' => $params['user'],
        'language' => $message['language'],
      ));
      $message['body'][] = token_replace(variable_get('nexteuropa_user_management_um_notification_body')['value'], array(
        'user' => $params['user'],
        'language' => $message['language'],
      ));
      break;
  }
}

/**
 * Checks the UM Administrator permissions.
 *
 * This will update UM Administrator's permissions to the current version. If a
 * permission is not granted, then it will grant, if a permission is granted but
 * shouldn't be, then it will revoke it.
 *
 * You can call this function in hook update whenever you need to update UM
 * Administrator role and you don't want to wait until next cron run.
 */
function _nexteuropa_user_management_check_um_administrator_permissions() {
  // Collect all the permissions that other modules wishes to be added to the
  // 'UM Administrator' role.
  $permission_wish_list = module_invoke_all('um_administrator_grant_permissions');
  // Get our do not give permissions.
  $do_not_give = _nexteuropa_user_management_get_do_not_give_permissions();
  // Get all the roles' granted permissions except administrator role and
  // itself.
  $granted_permission_query = db_select('role_permission', 'rp');
  $granted_permission_query->addField('rp', 'permission', 'permission');
  $granted_permission_query->condition('rp.rid', variable_get('user_admin_role', 0), '<>');
  $granted_permission_query->condition('rp.rid', variable_get('nexteuropa_user_management_um_administrator_rid'), '<>');
  // Exclude defined roles if there is.
  $exclude_roles = array_merge(variable_get('nexteuropa_user_management_exclude_roles_from_perm_grant_common', array()), variable_get('nexteuropa_user_management_exclude_roles_from_perm_grant_site', array()));
  if (!empty($exclude_roles) && is_array($exclude_roles)) {
    $granted_permission_query->innerJoin('role', 'r', 'r.rid = rp.rid');
    $granted_permission_query->condition('r.name', $exclude_roles, 'NOT IN');
  }
  $granted_permission_query->groupBy('permission');
  $roles_granted_permissions = $granted_permission_query->execute()->fetchAllKeyed(0, 0);
  // Suggested permissions.
  $suggested = _nexteuropa_user_management_get_suggested_permissions();
  // Get our forbidden permissions.
  $forbidden = _nexteuropa_user_management_get_forbidden_permissions();
  // Get all the permissions that's granted for UM Administrator.
  $um_administrator_query = db_select('role_permission', 'rp');
  $um_administrator_query->addField('rp', 'permission', 'permission');
  $um_administrator_query->condition('rid', variable_get('nexteuropa_user_management_um_administrator_rid'));
  $um_administrator_permissions = $um_administrator_query->execute()->fetchAllKeyed(0, 0);
  // Get all existing permissions.
  $all_permissions = array_keys(module_invoke_all('permission'));

  // Let's calculate out the correct permissions to be granted and revoke.
  $to_be_granted = array_diff($permission_wish_list, $do_not_give);
  $to_be_granted = array_merge($to_be_granted, $roles_granted_permissions, $suggested);
  $to_be_granted = array_diff($to_be_granted, $forbidden);
  $to_be_granted = array_intersect($to_be_granted, $all_permissions);
  $to_be_revoke = array_diff($um_administrator_permissions, $to_be_granted);

  // Execute.
  user_role_grant_permissions(variable_get('nexteuropa_user_management_um_administrator_rid'), $to_be_granted);
  if (!empty($to_be_revoke)) {
    user_role_revoke_permissions(variable_get('nexteuropa_user_management_um_administrator_rid'), $to_be_revoke);
  }
  watchdog('nexteuropa_user_management', "UM Administrator role's permission was updated.<br /><br />Granted:<br />!grant.<br /><br />Revoked:<br />!revoke.", array(
    '!grant' => implode(',<br />', $to_be_granted),
    '!revoke' => implode(',<br />', $to_be_revoke),
  ));
}

/**
 * Implements hook_cron().
 */
function nexteuropa_user_management_cron() {
  _nexteuropa_user_management_check_um_administrator_permissions();
}
